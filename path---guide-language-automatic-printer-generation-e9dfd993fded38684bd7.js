webpackJsonp([30],{"./node_modules/json-loader/index.js!./.cache/json/guide-language-automatic-printer-generation.json":function(e,t){e.exports={data:{allFile:{edges:[{node:{relativePath:"guide/editor-setup.md",childMarkdownRemark:{frontmatter:{title:"Editor setup",order:1}}}},{node:{relativePath:"guide/examples.md",childMarkdownRemark:{frontmatter:{title:"Examples",order:20}}}},{node:{relativePath:"guide/getting-started.md",childMarkdownRemark:{frontmatter:{title:"Getting started",order:0}}}},{node:{relativePath:"guide/index.md",childMarkdownRemark:{frontmatter:{title:"The Reason Guide",order:0}}}},{node:{relativePath:"guide/modules.md",childMarkdownRemark:{frontmatter:{title:"Modules",order:3}}}},{node:{relativePath:"guide/ocaml.md",childMarkdownRemark:{frontmatter:{title:"Comparison to OCaml",order:10}}}},{node:{relativePath:"guide/tools.md",childMarkdownRemark:{frontmatter:{title:"Tools",order:4}}}},{node:{relativePath:"guide/javascript/index.md",childMarkdownRemark:{frontmatter:{title:"JavaScript",order:4}}}},{node:{relativePath:"guide/javascript/converting.md",childMarkdownRemark:{frontmatter:{title:"Converting from JS",order:5}}}},{node:{relativePath:"guide/javascript/interop.md",childMarkdownRemark:{frontmatter:{title:"Interop",order:1}}}},{node:{relativePath:"guide/javascript/quickstart.md",childMarkdownRemark:{frontmatter:{title:"Quickstart",order:0}}}},{node:{relativePath:"guide/language/conditionals.md",childMarkdownRemark:{frontmatter:{title:"Conditionals",order:4}}}},{node:{relativePath:"guide/javascript/libraries.md",childMarkdownRemark:{frontmatter:{title:"Libraries",order:2}}}},{node:{relativePath:"guide/language/automatic-printer-generation.md",childMarkdownRemark:{frontmatter:{title:"Automatic Printer Generation",order:20}}}},{node:{relativePath:"guide/language/destructuring.md",childMarkdownRemark:{frontmatter:{title:"Destructuring & Pattern Matching",order:5}}}},{node:{relativePath:"guide/javascript/syntax-cheetsheet.md",childMarkdownRemark:{frontmatter:{title:"Syntax cheetsheet",order:1}}}},{node:{relativePath:"guide/language/data-types.md",childMarkdownRemark:{frontmatter:{title:"Built-in Data Types",order:2}}}},{node:{relativePath:"guide/language/functions.md",childMarkdownRemark:{frontmatter:{title:"Functions",order:3}}}},{node:{relativePath:"guide/language/index.md",childMarkdownRemark:{frontmatter:{title:"Language basics",order:1}}}},{node:{relativePath:"guide/language/jsx.md",childMarkdownRemark:{frontmatter:{title:"JSX",order:10}}}},{node:{relativePath:"guide/language/imperative-loops.md",childMarkdownRemark:{frontmatter:{title:"Imperative Loops",order:9}}}},{node:{relativePath:"guide/language/more-functions.md",childMarkdownRemark:{frontmatter:{title:"More on Functions",order:6}}}},{node:{relativePath:"guide/language/more-types.md",childMarkdownRemark:{frontmatter:{title:"More on Types",order:7}}}},{node:{relativePath:"guide/language/mutation.md",childMarkdownRemark:{frontmatter:{title:"Mutation",order:8}}}},{node:{relativePath:"guide/language/let-bindings.md",childMarkdownRemark:{frontmatter:{title:"Let Bindings",order:2}}}},{node:{relativePath:"guide/language/types.md",childMarkdownRemark:{frontmatter:{title:"Types",order:1}}}},{node:{relativePath:"guide/language/primitives.md",childMarkdownRemark:{frontmatter:{title:"Primitives",order:0}}}},{node:{relativePath:"guide/native/convert-from-ocaml.md",childMarkdownRemark:{frontmatter:{title:"Converting from OCaml",order:4}}}},{node:{relativePath:"guide/native/index.md",childMarkdownRemark:{frontmatter:{title:"Native",order:5}}}},{node:{relativePath:"guide/native/quickstart.md",childMarkdownRemark:{frontmatter:{title:"Quickstart",order:0}}}}]},file:{relativePath:"guide/language/automatic-printer-generation.md",childMarkdownRemark:{html:'<p>(update: this doesn\'t seem to be a thing anymore, as of july 2017)</p>\n<p><strong>IN BETA! Please only use this on the native side</strong>.</p>\n<p>In JS, it\'s common to use <code>console.log</code> or <code>JSON.stringify</code> to print an object\nor convert it to a string. This is not possible in OCaml. Because Reason is a\nfront-end to OCaml, however, we\'ve added the functionality to convert any of\nyour types to a string -- for free.</p>\n<div class="gatsby-highlight">\n      <pre class="hljs lang-reason"><code><span class="hljs-keyword">type</span> tree = <span class="hljs-type">Leaf</span> | <span class="hljs-type">Tree</span> tree int tree;</code></pre>\n      </div>\n<p>Normally, you would have to write your own stringification function to print a\n<code>tree</code>, as shown below.</p>\n<div class="gatsby-highlight">\n      <pre class="hljs lang-reason"><code><span class="hljs-comment">/* Don\'t you just love writing boilerplate code? */</span>\n<span class="hljs-keyword">let</span> <span class="hljs-keyword">rec</span> show_tree = <span class="hljs-func"><span class="hljs-keyword">fun</span><span class="hljs-params">\n|<span class="hljs-params"> Leaf<span class="hljs-params"> </span></span></span></span>=&gt; <span class="hljs-string">"Leaf"</span>\n| <span class="hljs-type">Tree</span> a i b =&gt;\n  <span class="hljs-string">"Tree ("</span> ^\n  show_tree a ^\n  <span class="hljs-string">", "</span> ^\n  string_of_int i ^\n  <span class="hljs-string">", "</span> ^\n  show_tree b ^\n  <span class="hljs-string">")"</span>;</code></pre>\n      </div>\n<p>With Reason, however, there is no need for that. You can just assume that\n<code>show_tree</code> exists (it is generated for you) and be on your merry way!</p>\n<div class="gatsby-highlight">\n      <pre class="hljs lang-reason"><code><span class="hljs-comment">/* Golly gee! No string nonsense here! */</span>\n<span class="hljs-keyword">let</span> myTree = <span class="hljs-type">Tree</span> <span class="hljs-type">Leaf</span> <span class="hljs-number">4</span> (<span class="hljs-type">Tree</span> <span class="hljs-type">Leaf</span> <span class="hljs-number">0</span> <span class="hljs-type">Leaf</span>);\nprint_endline (show_tree myTree);</code></pre>\n      </div>\n<p>If you would prefer a different look for your output, feel free to override the\ngenerated function -- simply define a function of the same name <code>show_tree</code> and\nit will shadow the generated one.</p>\n<p>Currently, this is an opt-in feature. Here\'s how to enable it:</p>\n<ul>\n<li>If you are using <code>refmt</code> manually, it requires adding the <code>--add-printers</code>\nflag.</li>\n<li>If you would like to attach the <code>ppx_deriving</code> runtime, add the\n<code>--add-runtime</code> option.</li>\n<li>If you are using <code>rebuild</code>, add the Ocamlbuild tag <code>reason.add_printers</code> to\nyour <code>_tags</code> file for the files for which you would like printers generated.\nThis implies <code>--add-printers --add-runtime</code>.</li>\n</ul>\n<p>Last, please note that this will not work with polymorphic types. That is, if\nyou have code with a <code>\'a</code> in it, Reason can\'t generate an automatic printer for\nthe generalized type.</p>\n<div class="gatsby-highlight">\n      <pre class="hljs lang-reason"><code><span class="hljs-comment">/* Sorry, you\'re out of luck. */</span>\n<span class="hljs-keyword">type</span> mytype \'a = <span class="hljs-type">SomeSadVariant</span> \'a;</code></pre>\n      </div>',frontmatter:{title:"Automatic Printer Generation"}}}},pathContext:{section:"guide",sectionTitle:"Guide",relativePath:"guide/language/automatic-printer-generation.md",relatedFiles:"/^guide\\/.*\\.md$/"}}}});
//# sourceMappingURL=path---guide-language-automatic-printer-generation-e9dfd993fded38684bd7.js.map